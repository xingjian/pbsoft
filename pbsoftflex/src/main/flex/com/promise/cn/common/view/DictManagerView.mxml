<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" creationComplete="init()"
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:view="com.promise.cn.framework.view.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.promise.cn.common.vo.Dict;
			import com.promise.cn.common.vo.DictContent;
			import com.promise.cn.framework.event.AppEvent;
			import com.promise.cn.framework.util.Global;
			import com.promise.cn.framework.util.Icons;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.mxml.RemoteObject;
			
			[Bindable]
			private var listDictArray:ArrayCollection;
			[Bindable]
			private var treeData:Object;
			[Bindable]
			private var dictServiceList:RemoteObject;
			[Bindable]
			private var dictServiceAdd:RemoteObject;
			[Bindable]
			private var dictContentServiceAdd:RemoteObject;
			private var dictContentServiceSearch:RemoteObject;
			[Bindable]
			private var linkButtons:Array = [{label:"增加",uri:"addDictContent",icon:Icons.addIcon},
				{label:"修改",uri:"editDictContent",icon:Icons.editIcon},
				{label:"删除",uri:"removeDictContent",icon:Icons.removeIcon},
				{label:"保存",uri:"saveDictContent",icon:Icons.saveIcon}];
			[Bindable]
			public var header:Array =  [{headerText:"字典名称",dataField:"dict.name",width:'250'},
				{headerText:"字典内容名称",dataField:"name",width:'250'},
				{headerText:"字典内容编码",dataField:"code"}];
				
			//初始化方法
			public function init():void{
				dictServiceList = Global.getRemoteObject("dictService",dictServiceListHandle);
				dictServiceAdd = Global.getRemoteObject("dictService",dictServiceAddHandle);
				dictContentServiceAdd = Global.getRemoteObject("dictService",dictContentServiceAddHandle);
				dictContentServiceSearch = Global.getRemoteObject("dictService",dictContentServiceSearchHandle);
				dictServiceList.listDict();
			}
			
			//获取字典树成功
			public function dictServiceListHandle(event:ResultEvent):void{
				listDictArray = event.result as ArrayCollection;
				treeData = {id:'root',name:"字典树",children:listDictArray};
				initTreeContextMenu();
			}
			
			//初始化树的右键菜单
			public function initTreeContextMenu():void{
				var contextMenu:ContextMenu = new ContextMenu();
				contextMenu.hideBuiltInItems();
				var contextMenuItems:Array = [];
				var addMenuItem:ContextMenuItem = new ContextMenuItem("新增字典");
				addMenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,addDict);
				var removeMenuItem:ContextMenuItem = new ContextMenuItem("删除字典");
				removeMenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,removeDict);
				contextMenuItems.push(addMenuItem);
				contextMenuItems.push(removeMenuItem);
				contextMenu.customItems = contextMenuItems;
				this.dictTree.contextMenu = contextMenu;
			}
			
			//增加字典项
			public function addDict(event:ContextMenuEvent):void{
				var addDict:AddDict = new AddDict();
				addDict.addEventListener("addDictEvent",addDictEventHandle);
				PopUpManager.addPopUp(addDict,this,true);
				Global.centerPopUpPos(addDict);
			}
			//删除字典项
			public function removeDict(event:ContextMenuEvent):void{
				
			}
			
			//linkBarClick事件
			public function linkBarClick(event:AppEvent):void{
				var uri:String = event.data.uri;
				switch(uri){
					case 'addDictContent':
						if(dictTree.selectedIndex!=-1){
							var dict:Object = dictTree.selectedItem;
							if(dict.id!="root"){
								var addDictContent:AddDictContent = new AddDictContent();
								addDictContent.dict = dict as Dict;
								addDictContent.addEventListener("addDictContentEvent",addDictContentEventHandle);
								PopUpManager.addPopUp(addDictContent,this,true);
								Global.centerPopUpPos(addDictContent);
							}else{
								Alert.show("请选择字典树下面的节点！","系统提示");
							}
						}else{
							Alert.show("请选择字典树下面的节点！","系统提示");
						}
						break;
					case 'removeDictContent':
						break;
					case 'editDictContent':
						break;
					case 'saveDictContent':
						break;
				}
			}
			
			//增加字典内容
			public function addDictContentEventHandle(event:AppEvent):void{
				var dictContent:DictContent = event.data as DictContent;
				dictContentServiceAdd.saveDictContent(dictContent);
			}
			
			//增加字典
			public function addDictEventHandle(event:AppEvent):void{
				var dict:Dict = event.data as Dict;
				dictServiceAdd.saveDict(dict);
			}
			
			//保存字典成功
			public function dictServiceAddHandle(event:ResultEvent):void{
				var retStr:String = event.result as String;
				if(retStr=="success"){
					dictServiceList.listDict();
					Alert.show("保存成功！","系统提示");
				}else{
					Alert.show(retStr,"系统提示");
				}
				
			}
			
			//保存字典内容成功
			public function dictContentServiceAddHandle(event:ResultEvent):void{
				var retStr:String = event.result as String;
				if(retStr=="success"){
					dictServiceList.listDict();
					dictTreeClick(null);
					Alert.show("保存成功！","系统提示");
				}else{
					Alert.show("保存失败！","系统提示");
				}
			}
			
			//字典树的点击事件
			public function dictTreeClick(event:MouseEvent=null):void{
				var dict:Object = dictTree.selectedItem;
				if(dict.id!="root"){
					dictContentServiceSearch.listDictContent(dict.code);
				}
			}
			
			//查询字典内容成功
			public function dictContentServiceSearchHandle(event:ResultEvent):void{
				var dictContentList:ArrayCollection = event.result as ArrayCollection;
				pageGrid.dataGrid.dataProvider = dictContentList;
			}
			
			
		]]>
	</fx:Script>
	<mx:Tree id="dictTree" width="20%" height="100%" click="dictTreeClick(event)" labelField="name" dataProvider="{treeData}" />
	<s:VGroup width="80%" height="100%">
		<view:CustomLinkBar id="clb" customLinkBarEvent="linkBarClick(event)" width="100%" buttons="{linkButtons}" />
		<view:PageGrid id="pageGrid" width="100%" height="100%" showPageParams="false" header="{header}" />
	</s:VGroup>
</s:HGroup>
